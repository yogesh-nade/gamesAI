name: Frontend CI/CD

on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-cicd.yml'
  pull_request:
    paths:
      - 'frontend/**'

env:
  NODE_VERSION: '18'

jobs:
  # Build job - runs on any branch
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint --if-present || true
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: frontend/build/
          retention-days: 7

  # Deploy job - only runs on main branch
  deploy:
    name: Deploy to Vercel
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
        
      - name: Build application
        working-directory: frontend
        run: npm run build
        
      - name: Deploy to Vercel
        working-directory: frontend
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          npx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          npx vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Notification job
  notify:
    name: Notify Deployment Status
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.build.result == 'success'
        run: echo "‚úÖ Frontend build completed successfully!"
        
      - name: Deploy Success Notification  
        if: needs.deploy.result == 'success'
        run: echo "üöÄ Frontend deployed to Vercel successfully!"
        
      - name: Failure Notification
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: echo "‚ùå Frontend pipeline failed!"