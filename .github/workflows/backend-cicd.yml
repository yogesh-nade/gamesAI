name: Backend CI/CD

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-cicd.yml'
  pull_request:
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Test and Build job - runs on any branch
  test-and-build:
    name: Test & Build Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run Django system checks
        working-directory: backend
        env:
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'True'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
        run: |
          python manage.py check --deploy
          
      - name: Run migrations
        working-directory: backend
        env:
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'True'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
        run: |
          python manage.py migrate
          
      - name: Run tests
        working-directory: backend
        env:
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'True'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
        run: |
          python manage.py test --verbosity=2
          
      - name: Collect static files
        working-directory: backend
        env:
          SECRET_KEY: 'test-secret-key-for-ci'
          DEBUG: 'False'
          DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/test_db'
        run: |
          python manage.py collectstatic --noinput

  # Deploy job - only runs on main branch
  deploy:
    name: Deploy to Render
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
          echo "üöÄ Deploy hook triggered successfully!"
          
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 90
          
      - name: Health Check
        run: |
          echo "Performing health check..."
          for i in {1..10}; do
            if curl -f ${{ secrets.BACKEND_URL }}/admin/ --connect-timeout 10; then
              echo "‚úÖ Backend is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install safety
        run: pip install safety
        
      - name: Run security scan
        working-directory: backend
        run: |
          safety check -r requirements.txt --json || true

  # Notification job
  notify:
    name: Notify Deployment Status
    needs: [test-and-build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.test-and-build.result == 'success'
        run: echo "‚úÖ Backend tests and build completed successfully!"
        
      - name: Deploy Success Notification
        if: needs.deploy.result == 'success'
        run: echo "üöÄ Backend deployed to Render successfully!"
        
      - name: Failure Notification
        if: needs.test-and-build.result == 'failure' || needs.deploy.result == 'failure'
        run: echo "‚ùå Backend pipeline failed!"